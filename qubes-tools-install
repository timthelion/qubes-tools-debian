#!/usr/bin/python
import os,sys,subprocess

########################################################

def printHelp():
 print("""

# qubes-tools install [OPTIONS]

This script will setup and install the qubes gui utilites into a debian HVM. It must be run as root.

Options:
 --setup-network Prompt for the IP address and gateway and automatically setup networking in this vm.
 --help Display this message.
 """)

# If --setup-network then setup networking
# prompt for
# IP
# Netmask
# gateway
# from the VMs settings dialog
def setupNetwork():
 print("Please enter the settings for your network.  You can find them in the settings dialog for this VM, which can be launched from the Qubes VM Manger.")
 address = raw_input("IP:")
 netmask = raw_input("Netmask:")
 gateway = raw_input("Gateway:")
 firstThree,_,_ = address.rpartition(".")
#write
 etc_network_interfaces = """
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug eth0
iface eth0 inet static
 address """ + address + """
 netmask """ + netmask + """
 network """ + firstThree + ".0" + """
 broadcast """ + firstThree + ".255" + """
 gateway """ + gateway + """
 # dns-* options are implemented by the resolveconf package, if installeed
 dns-nameservers """ + gateway
 with open("/etc/network/interfaces","w") as interfacesF:
  interfacesF.write(etc_network_interfaces)
 subprocess.call(["ifdown","eth0"])
 subprocess.call(["ifup","eth0"])

# append "xen /proc/xen xenfs defaults 0 0" to /etc/fstab
#
def setupFstab():
 with open("/etc/fstab","a") as fstabF:
  fstabF.write("\nxen /proc/xen xenfs defaults 0 0\n")
 subprocess.call(["mount","xen"])

# If you ran the debian installer from the netinstall iso, you probably set the username to be your name.
# If the user is named something other than "user", symlink /home/user to /home/$USER
def setupUser():
 """ Returns the name of the user to be used. """
 if not os.path.exists("/home/user"):
  print("Setting up symlinks to home directory.")
  user_homes = os.listdir("/home")
  if len(user_homes) == 1:
   os.symlink(os.path.join("/home/",user_homes[0]),"/home/user")
   print("Done setting up symlinks.")
   return user_homes[0]
  elif len(user_homes) == 0:
   raw_input("It seems you have no users on your system.  Please create a user named user and press ENTER to continue.")
  else:
   raw_input("It seems you have more than one users on your system, but none of them are named user.  Please create a user named user and press ENTER to continue.")
 return "user"
   
# Add NOPASSWD to the sudoers file.
def setupSudo():
 print("Setting up sudo with NOPASSWD.")
 subprocess.call(["apt-get","install","-qqy","sudo"])
 with open("/etc/sudoers","a") as sudoersF:
  sudoersF.write("\n"+username+" ALL=NOPASSWD:ALL\n")
 print("Done setting up sudo.")

def installDebs():
 print("Installing deb files.")
 files = os.listdir(os.getcwd())
 files.sort()
 for f in files:
  if f.endswith(".deb"):
   subprocess.call(["dpkg","-i",f])
   if not subprocess.call(["apt-get","-fy","install"]) == 0:
    sys.exit("Instalation failed.")
 
#######################################################

if os.geteuid() != 0:
 sys.exit("This script must be run as root.")

if "--help" in sys.argv or "-h" in sys.argv or "help" in sys.argv:
 printHelp()
 sys.exit()

if "--setup-network" in sys.argv:
 setupNetwork()

setupFstab()

username = setupUser()

setupSudo()

installDebs()

print("""Setup complete!

Please run:

$ qvm-prefs -s <vmname> qrexec_installed True

in dom0, replacing <vmname> with the name of this VM

and reboot the HVM.

""")
